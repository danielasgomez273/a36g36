# Generated by Django 4.2.1 on 2023-06-02 12:44

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Carrito',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado_carrito', models.CharField(choices=[('comprado', 'Comprado'), ('pago pendiente', 'Pago pendiente'), ('eliminado', 'Eliminado')], max_length=30)),
            ],
            options={
                'verbose_name': 'Carrito',
                'verbose_name_plural': 'Carritos',
                'db_table': 'Carrito',
            },
        ),
        migrations.CreateModel(
            name='Paciente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_paciente', models.CharField(max_length=30)),
                ('apellido_paciente', models.CharField(max_length=30)),
                ('email_paciente', models.EmailField(default='', max_length=100, unique=True)),
                ('contraseña_paciente', models.CharField(max_length=100)),
                ('telefono_paciente', models.CharField(max_length=30)),
                ('fecha_nacimiento', models.DateField(default=datetime.date.today)),
                ('sexo_paciente', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'verbose_name': 'Paciente',
                'verbose_name_plural': 'Pacientes',
                'db_table': 'paciente',
            },
        ),
        migrations.CreateModel(
            name='Prestador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_prestador', models.EmailField(default='', max_length=100, unique=True)),
                ('contraseña_prestador', models.CharField(max_length=50)),
                ('sede_prestador', models.CharField(max_length=50)),
                ('telefono_prestador', models.CharField(max_length=50)),
                ('informacion_extra_prestador', models.CharField(blank=True, max_length=200, null=True)),
                ('nombre_usuario_prestador', models.CharField(default='Prestador', max_length=100)),
            ],
            options={
                'verbose_name': 'Prestador',
                'verbose_name_plural': 'Prestadores',
                'db_table': 'Prestador',
            },
        ),
        migrations.CreateModel(
            name='Servicio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_servicio', models.CharField(max_length=50)),
                ('descripcion_servicio', models.TextField()),
                ('sede_servicio', models.CharField(max_length=50)),
                ('precio_servicio', models.DecimalField(decimal_places=2, max_digits=8)),
                ('comentarios_servicio', models.CharField(blank=True, max_length=200, null=True)),
                ('duracion_servicio', models.CharField(max_length=50)),
                ('prestador', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='appOneDrop.prestador')),
            ],
            options={
                'verbose_name': 'Servicio',
                'verbose_name_plural': 'Servicios',
                'db_table': 'Servicio',
            },
        ),
        migrations.CreateModel(
            name='Registro_glucemia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_registro', models.DateTimeField(default=django.utils.timezone.now)),
                ('valor_glucemia', models.DecimalField(decimal_places=2, max_digits=3)),
                ('comentario_registro', models.CharField(blank=True, max_length=200, null=True)),
                ('paciente', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='appOneDrop.paciente')),
            ],
            options={
                'verbose_name': 'Registro glucemia',
                'verbose_name_plural': 'Registros glucemia',
                'db_table': 'Registro_glucemia',
            },
        ),
        migrations.CreateModel(
            name='Paquete',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_paquete', models.CharField(default='paquete', max_length=50)),
                ('duracion_total', models.CharField(max_length=50)),
                ('precio_total', models.CharField(max_length=50)),
                ('sede_paquete', models.CharField(max_length=50)),
                ('fecha_seleccionada', models.DateTimeField(default=django.utils.timezone.now)),
                ('servicio', models.ManyToManyField(to='appOneDrop.servicio')),
            ],
            options={
                'verbose_name': 'Paquete',
                'verbose_name_plural': 'Paquetes',
                'db_table': 'Paquete',
            },
        ),
        migrations.CreateModel(
            name='Ficha_medica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_diabetes', models.CharField(choices=[('tipo 1', 'Tipo 1'), ('tipo 2', 'Tipo 2'), ('gestacional', 'Gestacional')], max_length=35)),
                ('terapia_insulina', models.CharField(choices=[('tipo 1', 'Tipo 1'), ('tipo 2', 'Tipo 2')], max_length=30)),
                ('terapia_pastillas', models.CharField(choices=[('tipo 1', 'Tipo 1'), ('tipo 2', 'Tipo 2')], max_length=30)),
                ('tipo_glucometro', models.CharField(choices=[('tipo 1', 'Tipo 1'), ('tipo 2', 'Tipo 2')], max_length=30)),
                ('tipo_sensor', models.CharField(choices=[('tipo 1', 'Tipo 1'), ('tipo 2', 'Tipo 2')], max_length=30)),
                ('comorbilidades', models.TextField(default='No')),
                ('objetivo_glucosa', models.DecimalField(decimal_places=2, max_digits=3)),
                ('paciente', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, to='appOneDrop.paciente')),
            ],
            options={
                'verbose_name': 'Ficha medica',
                'verbose_name_plural': 'Fichas medicas',
                'db_table': 'Ficha_medica',
            },
        ),
        migrations.CreateModel(
            name='Factura',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_completa_factura', models.DateTimeField(default=django.utils.timezone.now)),
                ('concepto_factura', models.CharField(max_length=50)),
                ('valor_factura', models.DecimalField(decimal_places=2, max_digits=8)),
                ('medio_pago_factura', models.CharField(choices=[('EFECTIVO', 'EFECTIVO'), ('DEBITO', 'DEBITO'), ('CREDITO', 'CREDITO'), ('OTROS', 'OTROS')], max_length=30)),
                ('estado_pago', models.CharField(max_length=50)),
                ('carrito', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='appOneDrop.carrito')),
            ],
            options={
                'verbose_name': 'Factura',
                'verbose_name_plural': 'Facturas',
                'db_table': 'Factura',
            },
        ),
        migrations.AddField(
            model_name='carrito',
            name='paciente',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='appOneDrop.paciente'),
        ),
        migrations.AddField(
            model_name='carrito',
            name='servicio',
            field=models.ManyToManyField(to='appOneDrop.paquete'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(default='', max_length=150, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
